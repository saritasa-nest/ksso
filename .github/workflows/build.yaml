---
name: Build and Package KSSO
on:
  push:
    branches:
      - main
  pull_request:
jobs:
  build:
    name: Build KSSO
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os:
          - fedora-latest
          - macos-latest
          - windows-latest
        python-version:
          - 3.12
    timeout-minutes: 30
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          echo "export PATH=\"$HOME/.local/bin:$PATH\"" >> $GITHUB_ENV
          source $GITHUB_ENV
      - name: Install dependencies
        run: poetry install --no-interaction --no-ansi
      - name: Determine version
        id: version
        run: |
          VERSION=$(poetry version --short)
          echo "::set-output name=version::$VERSION"
      - name: Build with PyInstaller
        run: |
          ls -la
          if [[ "${{ matrix.os }}" == "ubuntu-latest" || "${{ matrix.os }}" == "macos-latest" ]]; then
            poetry run pyinstaller --add-data "ksso/success_message.html:ksso" --onefile ksso/main.py --name ksso-${{ steps.version.outputs.version }}
          elif [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            poetry run pyinstaller --add-data "ksso/success_message.html;ksso" --onefile ksso/main.py --name ksso-${{ steps.version.outputs.version }}
          fi
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: ksso-${{ matrix.os }}-${{ steps.version.outputs.version }}
          path: dist/ksso*
